// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int        @id @default(autoincrement())
  email      String     @unique
  active     Boolean    @default(false)
  name       String
  image      String?    @default("default.jpeg")
  password   String
  created_at DateTime?  @default(now())
  updated_at DateTime?
  deleted_at DateTime?
  role_id     Int
  role       Role       @relation(fields: [role_id], references: [id]) // one role
  ApiToken   ApiToken[]

  @@map("users")
}

model Role {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  created_at DateTime?    @default(now())
  updated_at DateTime?
  deleted_at DateTime?
  user       User[] // to many users
  ModuleRole ModuleRole[] // to many modules

  @@map("roles")
}

model Module {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  created_at DateTime?    @default(now())
  updated_at DateTime?
  deleted_at DateTime?
  ModuleRole ModuleRole[] // to many moduleroles

  @@map("modules")
}

model ModuleRole {
  role_id   Int
  module_id Int
  read     Boolean
  write    Boolean
  role     Role    @relation(fields: [role_id], references: [id]) // to one role
  module   Module  @relation(fields: [module_id], references: [id]) // to one module

  @@id([role_id, module_id])
  @@map("module_role")
}

model ApiToken {
  id         Int       @id @default(autoincrement())
  user_id     Int
  type       String    @default("bearer")
  token      String    @unique
  expires_in DateTime
  created_at DateTime? @default(now())
  is_valid   Boolean   @default(true)
  user       User      @relation(fields: [user_id], references: [id]) // to one role

  @@map("api_tokens")
}
